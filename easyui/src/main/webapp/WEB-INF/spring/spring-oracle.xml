<beans:beans xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 数据源配置 -->
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<beans:property name="user" value="cstdev" />
		<beans:property name="password" value="ahwom_womdev_2014" />
		<beans:property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<beans:property name="jdbcUrl" value="jdbc:oracle:thin:@112.122.11.193:51521:orcl" />
	</beans:bean>

	<!-- 配置spring管理mybatis -->
	<beans:bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations">
			<beans:list>
				<beans:value>classpath*:com/summer/sys/dao/mapping/*.xml</beans:value>
				<beans:value>classpath*:com/summer/man/dao/mapping/*.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- 事务管理 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<beans:bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<beans:property name="transactionManager" ref="transactionManager"></beans:property>
		<beans:property name="transactionAttributes">
			<beans:props>
				<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常; PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起; PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
				<beans:prop key="find*">PROPAGATION_SUPPORTS,readOnly</beans:prop>
				<beans:prop key="query*">PROPAGATION_SUPPORTS,readOnly</beans:prop>
				<beans:prop key="delete*"> PROPAGATION_SUPPORTS</beans:prop>
				<beans:prop key="update*">PROPAGATION_REQUIRED,-Exception</beans:prop>
				<beans:prop key="save*">PROPAGATION_REQUIRED,-Exception</beans:prop>
				<beans:prop key="collect*">PROPAGATION_REQUIRED</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>


	<beans:bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<beans:property name="beanNames">
			<!-- 对类名以MybatisService结尾的类进行代理 -->
			<beans:value>*Service*</beans:value>
		</beans:property>
		<!-- 对代理类进行加载拦截器(实现通知的过程) -->
		<beans:property name="interceptorNames">
			<beans:list>
				<beans:value>transactionInterceptor</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
</beans:beans>